## Main Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-ingress
  labels:
    app: demo
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: tr-tuomas-palosaari.k8s.polarsquad.training
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
      - path: /go(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: hello-go-service
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
  labels:
    type: webserver
spec:
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.23.4
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# Nginx
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
    app: nginx
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: nginx
---
# Storage for Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  resources:
    requests:
      storage: 1Gi
---
# Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-pvc-demo
  labels:
    app: redis-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-pod
  template:
    metadata:
      labels:
        app: redis-pod
    spec:
      containers:
      - image: redis:7.0.5
        name: redis
        resources:
          requests:
            cpu: 50m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 200Mi
        livenessProbe:
          tcpSocket: 
            port: 6379
          initialDelaySeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command: ["redis-cli", "ping", "|", "grep PONG"]
          initialDelaySeconds: 30
          timeoutSeconds: 10
        volumeMounts: 
          - mountPath: /data
            name: redis-data
        ports:
        - containerPort: 6379
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-claim
---
#Redis service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app: hello-http
spec:
  selector:
    app: redis-pod
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-go
  labels:
    app: hello-go
    type: appserver
spec:
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: hello-go
  template:
    metadata:
      labels:
        app: hello-go
    spec:
      containers:
      - name: hello-go
        image: europe-north1-docker.pkg.dev/tuomaspal-sandbox/training/hello-http:0.0.2
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 3
        env:
          - name: REDIS
            value: redis-service
          - name: REDIS_PORT
            value: "6379"
---
apiVersion: v1
kind: Service
metadata:
  name: hello-go-service
  labels:
    app: hello-go-app
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: hello-go